name: Update the manifest for PC in branch when default manifest changed

on:
  # push:
  #   branches: [ main ]
  push:
    paths:
      - 'pc/default/manifest.json'  
    branches:
      - main
  workflow_dispatch:

jobs:
  Update_default_manifest:
    name: loop the Branch, then compare and update the manifest for PC with the default manifest.
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout ce-oem-dut-checkbox-configuration
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      - name: Store default manifest 
        run: |
          # Copy the default manifest to a known, stable location for comparison
          mkdir -p /tmp/default_manifests
          cp ./pc/default/manifest.json /tmp/default_manifests/manifest.json
          cp ./utils/manifest_key_updater.py /tmp/default_manifests/manifest_key_updater.py
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Process and update manifests in other branches
        env:
          # Use GITHUB_TOKEN for pushing, ensure your repo has contents: write permissions
          # or use a PAT if pushing to different repos or if GITHUB_TOKEN isn't sufficient.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Enable verbose debugging and strict error checking
          set -euxo pipefail

          DEFAULT_MANIFEST="/tmp/default_manifests/manifest.json"
          # Get all remote branches matching the pattern
          # Filter out the main branch if it matches the pattern
          git branch -r
          branches=$(git branch -r | grep -E 'origin/[0-9]{6}-[0-9]{5}$' | sed -E 's/origin\///' | grep -v '^main$')

          if [ -z "$branches" ]; then
            echo "No matching branches found to process."
            exit 0
          fi

          # Loop through each matching branch
          for branch in $branches; do
            echo "--- Processing branch: $branch ---"

            # Fetch the specific branch and check it out
            git fetch origin "$branch"
            git checkout "$branch"


            if [ -d "./pc/$branch" ]; then
              echo "$branch is a PC device device branch."
              manifest_path="./pc/$branch/manifest.json"
              changes_made=false

              if [ ! -f "$manifest_path" ]; then
                echo "Manifest file not found in $manifest_path. Creating it with default manifest."
                mkdir -p "$(dirname "$manifest_path")"
                cp "$DEFAULT_MANIFEST" "$manifest_path"
                changes_made=true
              else
                echo "Comparing and potentially updating manifest: $manifest_path"

                # Compare the manifest file in the branch with the default manifest and sync any new items to it.  
                # If the branch's manifest file is not a valid JSON file, replace it with the default manifest. 
                python3 /tmp/default_manifests/manifest_key_updater.py "$DEFAULT_MANIFEST" "$manifest_path"

                if ! git diff --quiet "$manifest_path"; then
                    echo "Changes detected in $manifest_path after running Python script."
                    changes_made=true
                else
                    echo "No changes detected in $manifest_path by Python script."
                fi
              fi

              # Commit and push only if changes were made
              if [ "$changes_made" = true ]; then
                echo "Committing and pushing changes to branch: $branch"
                git add "$manifest_path"
                if git diff --cached --quiet; then
                    echo "No actual changes to commit in $manifest_path, despite 'changes_made' flag. Skipping commit."
                else
                    git commit -m "chore: Update manifest.json of $$branch with default manifest from main branch"
                    # Push changes. If permissions are an issue, this is where it will fail.
                    git show HEAD
                    # if ! git push origin "$branch"; then
                    #     echo "Error: Failed to push to branch $branch."
                    #     exit 1 # Exit with error if push fails
                    # fi
                fi
              else
                echo "No changes to commit for branch $branch."
              fi
            else
              echo "Directory ./pc/$branch does not exist. This is not a PC device, skipping branch $branch."
            fi

            echo "--- Finished processing branch: $branch ---"
            git checkout main
          done